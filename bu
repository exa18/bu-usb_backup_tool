#!/bin/bash
#
tag="BU"
version="1.2"
#
# by Joe Collins. (www.ezeelinux.com)
# additional by Julian (exa18) Cenkier
#
# A simple tool to create reliable backups of /etc/ and /home from multiple
# (GNU/General Public License version 2.0)
#
# ...And away we go!
#
# \/
# Declare static variables:
#
appname="${tag} -- USB Backup Tool (Version ${version})"
apperror="${tag} Error: "
appdrive="${tag}_Drive"
appbackup="${tag}_Backups"
#
[[ -n $USER ]] && user=$USER || user=$(id -un)
[[ -n $HOSTNAME ]] && host=$HOSTNAME || host=$(hostname)

# Check which package manager working
    #
    # Debian/Ubuntu (default)
    # For Debian 9 and up, Ubuntu 16.04 and up and Linux Mint 18.x and up.
    #
    ### package manager
    syspkg="apt install -y"
    ### path prefix
    sysdirfix=
if [[ -z $(command -v yum) ]];then
    #
    # CentOS/RedHat
    #
    syspkg="yum install -y"
elif [[ -z $(command -v eopkg) ]];then
    #
    # Solus OS Linux
    #
    syspkg="eopkg it -y"
    sysdirfix="/run"
fi

# Check for less and rsync, install if needed:
command -v rsync > /dev/null && is_rsync=1
command -v less > /dev/null && is_less=1
if [[ -n $syspkg ]];then
    [[ -z $is_rsync ]] && sudo $syspkg rsync
    [[ -z $is_less ]] && sudo $syspkg less
else
    [[ -z $is_rsync ]] && echo "Need install RSYNC !" && exit 1
    [[ -z $is_less ]] && echo "Need install LESS !" && exit 1
fi
#
# \/
#
# CHECK USB
#
drive_test() {

    # This function checks for a usable USB drive.

    # Checking for any USB drive:

    if [[ ! $(lsblk -S -o  TRAN | grep 'usb') = *usb* ]]; then

        echo $'\n'$"${apperror}No USB drive connected!" >&2
        echo "- Check to see that ${appdrive} is plugged in." >&2
        echo "- Please run 'bu --help' to learn about drive setup. :)" >&2
        exit 1

    fi

    # Checking for a USB drive that is setup for BU:

    if [ ! -d $sysdirfix/media/$user/$appdrive ]; then

        echo $'\n'$"${apperror}No USB drive with a partition labeled "${appdrive}!"" >&2
        echo "- The drive(s) you have plugged in are not ready for use with BU." >&2
        echo "- Don't launch BU as root or with 'sudo bu.'" >&2
        echo "- Please run 'bu --help' to learn about drive setup. :)" >&2
        exit 1

    fi

}
#
#   BACKUP
#
backup() {

    # Check for sudo privileges:

    echo "Checking for sudo privileges..."
    sudo ls >/dev/null

    # Making sure user has ownership of the BU_Drive:

    echo "Changing ownership of $appdrive to $user..."
    sudo chown $user $sysdirfix/media/$user/$appdrive/
    #
    #   source: https://github.com/TooManyHobbies/bu-usb_backup_tool/commit/f60a0885bef3512e8b6ca91e9513635aab42f9eb
    #
    # Change the ownership of the BU_Backups directory as well
    # This should fix the issue of using the drive on different
    # machines from different user accounts.
    sudo chown $user $sysdirfix/media/$user/$appdrive/$appbackup/

    # Creating machine specific directories:
    echo "Checking for/creating machine specific directories..."
    mkdir -p $sysdirfix/media/$user/$appdrive/$appbackup/$host

    # Check if directory for host machine was successfully created:

    if [ "$?" == "0" ]; then

        echo "...Done. $appdrive is ready."

    else

        echo $'\n'$"${apperror}Could not create directory for $host!" >&2
        echo "- Backup aborted. Check the status of the $appdrive." >&2
        exit -1
    fi

    # Run rsync command:

    echo "Backing up /etc and /home to $appdrive/$appbackup/$host/..."
    sudo rsync -aH --delete --info=progress2 /etc /home \
    $sysdirfix/media/$user/$appdrive/$appbackup/$host/

    # Check for status of backup and exit:

    if [ "$?" == "0" ]; then

        # Clear any accidental input during backup:
        read -t 1 -n 10000 discard

        echo "------------------"
        echo "- All backed up! -"
        echo "------------------"

        # Remove old and create new timestamp file:
        rm -f $sysdirfix/media/$user/$appdrive/$appbackup/$host/$tag\ Backup* >/dev/null 2>&1
        touch $sysdirfix/media/$user/$appdrive/$appbackup/$host/"$tag Backup was successful: $(date)"

        echo "Wait! Syncing Drives..."
        sync
        echo "...done"
        echo "It's safe to remove the USB drive now."
        exit

    else

        # Clear any accidental input during backup:
        read -t 1 -n 10000 discard

        # Remove old and create new timestamp file:
        rm -f $sysdirfix/media/$user/$appdrive/$appbackup/$host/$tag\ Backup* >/dev/null 2>&1
        touch $sysdirfix/media/$user/$appdrive/$appbackup/$host/"$tag Backup had some errors: $(date)"

        echo "There were errors! Try running the command again to correct them." >&2
        echo "- If errors persist then you may have corrupt files or failing hardware." >&2
        exit 1

    fi

}
#
#   RESTORE
#
restore() {

    # Runs an rsync operation to restore host's /home directory.

    # Check for the host's backup directory:

    if [ ! -d $sysdirfix/media/$user/$appdrive/$appbackup/$host/ ]; then

        echo "${apperror}Cannot find valid backup directory for $host!" >&2
        echo "- This drive may not have been used to backup this machine." >&2
        echo "- $appbackup/$host directory may have been moved or deleted." >&2
        echo "- Hostname or username may have changed since last backup." >&2
        exit 1

    fi

    echo $'\n'$"BU Restore Function (Version ${version})"
    echo $'\n'$"WARNING!"
    echo "Any new files created in /home since last backup WILL BE DELETED!"
    echo "Are you sure you want to restore now? [y/N]"
    read -n 1 -s choice

    if [ "$choice" == "y" ]; then

        # Giving user a chance to close other apps and starting rsync.

        echo "Close any running applications and press any key to continue."
        read -n 1 -s
        echo $'\n'$"Restoring /home... Please DO NOT open any applications."
        sudo rsync -aH --delete --info=progress2 \
        $sysdirfix/media/$user/$appdrive/$appbackup/$host/home/ /home/

        # Checking status of rsync exit code:

        if [ "$?" == "0" ]; then

            # Prompt user to restart machine and exit:

            # Clear any accidental input during restore:
            read -t 1 -n 10000 discard
            echo "-------------------------"
            echo "- Restoration Complete! -"
            echo "-------------------------"
            echo "Wait! Syncing drives..."
            sync
            echo "...Done."
            echo "It's now safe to remove $appdrive and restart to take all changes make effect."
            echo "Would you like to restart machine now? [y/N]"
            read -n 1 -s choice
            [[ "$choice" == "y" ]] && sudo shutdown -r now
            exit

        else

            # If rsync fails:

            # Clear any accidental input during restore:
            read -t 1 -n 10000 discard
            echo $'\n'$"${apperror}rsync exited with errors!" >&2
            echo "DO NOT DO ANYTHING UNTIL YOU:" >&2
            echo $'\n'$"    Make sure $appdrive USB is still plugged in." >&2
            echo "    Remount $appdrive USB by unplugging it and plugging it back in." >&2
            echo $'\n'$"Wait a few seconds and try running 'bu --restore' again." >&2
            echo "You may need to manually restore your data if errors persist." >&2
            exit 1

        fi

    else

        echo "Restoration canceled."
        exit

    fi

}
#
#   HELP
#
help() {

# Print help information using less utility:

less << _EOF_

 ${appname} -- Help

 Press "q" to exit this Help page.

 Commands:

 bu = Fully backs up host's /etc and /home directories to ${appdrive}.
 bu --help = Prints this help information.
 bu --restore = Accesses BU Restore function.

 Description:

 BU is a program that makes keeping all of your user data safely backed up on
 a dedicated External USB drive easy.

 BU will update files that have changed, remove files that have been
 deleted and add any new files that have been created since the last backup.
 The initial backup can take a lot of time if you have a lot of data stored
 in your system's /home directory. BU creates a directory with the host name
 of the machine it's backing up from inside ${appbackup}. This allows users to
 share one ${appdrive} with multiple machines.

 The directory structure and all files are stored openly to allow users easy
 access if they only need to retrieve a few files or directories using a file
 manager.

 The BU Restore function is an interactive tool that let's users restore their
 /home directories to a backup up state. This function will only work when
 restoring to a machine with the exact same hostname as the one the backs were
 made from. It is intended for emergency use, as when significant number of
 directories and files are accidentally removed from /home.

 ${appdrive} Setup

 You need to prepare a BU Drive with a tool like Gparted or Disks.
 This can be any USB storage device. The dedicated USB drive MUST contain a
 partition formatted with a Linux native file system such as Ext4 or XFS. The
 partition MUST be labeled "${appdrive}" so BU can find it and use it for backups.
 The partition needs to have enough free capacity to store all data in /home on
 all of the machines you want to use the drive for. Note: You will get many
 errors if you attempt to use BU to backup to a partition that is formatted with
 non-native file systems like FAT32 or NTFS. 

_EOF_

}

#
# Execution
#

# Checking for command line arguments:

if [ "$1" == "--help" ]; then
	help
	exit
fi

if [ "$1" == "--restore" ]; then
	drive_test
	restore
fi

if  [ -n "$1"  ]; then
    echo "${apperror}Invalid argument. " >&2
    echo "- Try 'bu --help' to see the available commands. :)" >&2
    exit 1
fi

# Tell 'em who we are...
# and do backup
echo $appname
drive_test
backup

